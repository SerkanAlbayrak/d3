---
title: "List veri yapısı üzerine üzerine notlar ve map Fonksiyonu"
author: Raif Serkan Albayrak
description: "R'ın en esnek veri yapısı olan list veri yapısından tutulan veriye ulaşma, formatlama ve dönüştürme üzerine en sık kullandığım yöntemleri yazıyorum."
date: 2022-12-11
categories:
  - purrr
  - map
code-fold: false
image: "img/preview.png"
lang: tr
code-line-numbers: false
toc-title: İçerik
---

```{r}
library(tidyverse)
library(listviewer)
library(DT)
library(repurrrsive)
```

Liste veri yapısı her ne kadar R'ın bildiğim kadarıyla en esnek veri yapısı olsa da, filtrelenmesi, endekslenmesi ve hata veri girişi konusu karışık ve az biliniyor. Özellikler JSON tipi veri liste dönüştüğünde katmanlı ve düzensiz bir yapıya sahip olabiliyor. Bu gibi durumlarda istenen herhangi bir katmandaki tüm veriyi çekmek veya ihtiyaç duyulan filtrelemeleri yapmak kolay değil. Bunlardan sonra daha detaylı analizler için zaten list'i tibble veya dataframe'e dönüştürmek gerekiyor. O kısım da bu yazının konusu.

Yazıya ters yönlü transformasyonla başlamak en iyi seçenek gibi görünmeyebilir ama aslında yazı boyunca kullanılabilecek örnek list verisi oluşturabilmek için de tibble'dan list'e dönüşüm ile başlıyorum.

# Tibble veya DataFrame'den List Oluşturmak

Tibble'dan list'e dönüşüm bir veya daha fazla kategorik değişken üzerinden yürütülür. Örneğin `mtcars` verisinde silindir değişkeni ile veriyi üçe parçalamak mümkün. Sonuçta bir list elde edilir.

## Split

```{r}
mtList <- mtcars %>%
  split(.$cyl)
# Daha anlaşılır formatta aynı komut şöyle de yazılabilirdi:
mtList <- split(mtcars, f = mtcars$cyl)

reactjson(mtList, collapsed = 1, height = 200) 

```

<br>

Bir diğer örnek `CO2` verisi üzerinde olacak. Önce veriyi tanıtıyorum.

```{r}
CO2 <- CO2
datatable(CO2)

```

Aynı verinin reactjson ile gösterimi aşağıda verildi. Aslında reactjson list görselleştirmesinde kullanılıyor ama her tibble veya dataframe için kolon'un bir list ile eşdeğer olduğunu hatırlamak için buraya koydum. Yukarıda DataTable ile gösterilen ile aşağıda reactjson ile gösterilen birebir aynı veri.
```{r}
reactjson(CO2,collapsed = 1,height = 250)
```

Yukarıda data `Type` ve `Treatment` değişkenleri etrafında dağıtıldığında;

```{r}
CO2List <- split(CO2, f = list(CO2$Type, CO2$Treatment))
reactjson(CO2List,collapsed=2)

```

Burada split işlemini geri almak da mümkün ama işlevsiz çünkü f argümanı o aşamada elde olması pek mümkün olmayan bir veri. CO2 verisi o aşamada çoğunlukla elde değil zaten. 
```{r}
dfCO2 <- unsplit(CO2List,f = list(CO2$Type,CO2$Treatment))
head(dfCO2)
```

Sonuç itibariyle pek de anlamlı olmadığını düşündüğüm unsplit, list'i rectangular forma sokmak için bir yöntem. Ama fonksiyonun içinde `f` argümanı olarak ne yazılacak?    

Öte yandan `split` fonksiyonu oldukça faydalı. Ancak bir sonraki bölümde anlatılan `nest` kesinlikle daha iyi.

## Nest

Nest ile de list oluşturmak mümkün. Yukarıdaki örneklere uyguluyorum. Aşağıda da görüleceği üzere silindir etrafında tüm veriyi dağıtıyor. Daha doğru bir ifade ile "nest" kelimesinin anlamından yola çıkarak, aslında silindir değişkeni *dışında* tüm değişkenleri saklıyor. Sonuçta 3x2 boyutunda bir tibble çıkıyor. 

```{r}
mt_nest <- mtcars %>% nest(data=!cyl)
mt_nest
```

Bu yapıyı dikkatlice incelemekte fayda var çünkü herhangi bir list üzerinde tibble() konutu uygulandığında doğrudan bu yapıyla karşılaşıyorum. Yani en dışta etiketler sonra aynı dataframe yapısı (değişkenler) tekrar ediyor. 


İşin aslı veri genellikle aşağıda yapay bir şekilde oluşturduğum formda geliyor, yani list yapısında.

```{r}
mt_nest_List <- list('4' = mt_nest$data[[1]],'6' = mt_nest$data[[2]],'8' = mt_nest$data[[3]])
mt_nest_List
```

Bu arada yukarıda bu işin `split` komutuyla nasıl hızlıca yapıldığı gösterilmişti. Ama şu aşamada vurgulamak istediğim genellikle webcrawling sonrası json veya list tipinde veri alıyorum ve amaç bu veriyi formatlamak. İşte eğer sanal olarak oluşturulan bu listin webcrawling sonucu elde edildiğini varsayarsak, `tibble` komutu ile yukarıda bahsettiğim forma ulaşabiliyorum.

```{r}
tibble(names(mt_nest_List),(mt_nest_List))
```

Bu işi nest'ten daha iyi yapan komut `enframe`. Aşağıda onunla çalıştım.

::: {.callout-tip collapse="true"}
# Modify_depth

Zaman zaman veriyi rectangular forma dönüştürmeden de list'in çeşitli seviyelerinden veri çekme ihtiyacı olabiliyor.


https://purrr.tidyverse.org/reference/modify.html adresinde konu ile ilgili detaylı açıklama ve çok sayıda örnek mevcut.

Aşağıdaki örnekte bir nested list içinde, obj birinci seviye, prop ikinci seviye ve param üçüncü seviye.

2. seviyeden (prop) tüm değerleri çekmek için modify depth kullanılabilir.

```{r}
l1 <- list(
  obj1 = list(
    prop1 = list(param1 = 1:2, param2 = 3:4),
    prop2 = list(param1 = 5:6, param2 = 7:8)
  ),
  obj2 = list(
    prop1 = list(param1 = 9:10, param2 = 11:12),
    prop2 = list(param1 = 12:14, param2 = 15:17)
  )
)

l2 <- l1 %>% modify_depth(2, "param1")
l2
```
:::

# Enframe

NFT Datasının içinden trait verileri alıp bir tibble'a dönüştürme işiyla başlıyorum. Aslında verinin içinde trait alt listesinin yapısı son derece düzgün. Amaç bunu dönüştürmek. Temel sıkıntı tekrar etmesi gereken name değerleri var.

```{r}

load("nft_traits.rda")
reactjson(rc_traits_data,collapsed = 2)
```


Enframe ile baştan bir yapı empoze edilebiliyor.

```{r}
d0 <- rc_traits_data$collection$traits
d1 <- d0 %>% enframe(name = "name", value = "values")
d1
```

Amaç values sütununda bulunan her list'i tibble'a dönüştürmek. Aşağıdaki kodu anlamak çok kritik. Tibble içinde map işlemi nasıl yapılır onu gösteriyor. İki farklı şekilde aynı sonuca ulaşıyorum. Birincisinde satır bazında her list'in uzunluğunu hesaplatıyorum. İkincisinde ise tek defada bütün values kolonuna işlem uygulayıp yeni değişken oluşturuyorum.

Daha basitleştirmek için: bir tibble içinde bir değişkeni iki ile çarparak yeni bir değişken oluşturmak istensin. Nasıl yapılır? İki yolu var. Birincisi, satır bazında işlem yapılır. Excel'de olduğu gibi. Yan hücrenin iki katını al, aşağıya şek. Eğer hücre bazına indirmeden length hesaplamaya kalkılırsa bütün kolonunun length'i hesaplanıp her hücreye yazılır ki bu bir hatadır. İkinci yol ise vektör operasyonu kullanmak. Değişkeni bir vektör olarak alıp, vektörü iki ile çarpıp, sonucu tibble'a yeni bir değişken olarak yerleştirmek. İşte `map` ile yapılan ikincisi. Bu işlem çok daha hızlı oluyor.

```{r}
d2.0 <- d1 %>% rowwise() %>% mutate(n_t=length(values))
d2.0
d2.0.error <- d1 %>% mutate(n_t=length(values))
d2.0.error
d2 <- d1 %>% mutate(n_t = map_int(values,length))
d2
```
Yazının devamında bu yapıyı `unnest_longer kullanarak düzenliyorum`

# Rectangling

## purrr::list_.

Eğer split, nest veya enframe benzeri bir şekilde oluşturulan yapıya benzer (en dış isimler, bir alt seviye dataframeler) bir listten tibble'a dönüşüm gerekirse; en kolayı `purrr` kütüphanesi içinde `list_rbind` kullanmak. Ancak bu gerçekten çok spesifik bir durum. Çünkü ikinci seviyede tüm elemanların data.frame olması şart, vektör olmaları yetmez.

```{r}
head(purrr::list_rbind(CO2List))

```

Daha da ilginci ve daha sık kullanılma potansiyeli olan ise `name` argümanını da devreye sokmak:

```{r}
head(purrr::list_rbind(CO2List,names_to = "names"))
```
Elbette yukarıdaki örnekler içinde bu yöntemin çalışacağı diğer örnek split ile oluşturulan mtList.
```{r}
head(purrr::list_rbind(mtList))
```


## tidyr

List yapısını en başarılı şekilde matris formuna dönüştüren kütüphane. Kullanmayı iyi bir şekilde öğrenmem gereken topu topu 3 fonksiyon var.

Burada https://tidyr.tidyverse.org/articles/rectangle.html adresindeki örnekleri detaylandıracağım. `gh_users` verisi github kullanıcısı 6 kişinin bilgilerini içeriyor. İki seviye list şeklinde ama anadallardan itibaren içerisinin formu her dal için aynı. 

```{r}
data(gh_users)
reactjson(gh_users,collapsed = 2)
```

Önce list'i tibble formatına getiriyoruz.Bu en dıştaki seviyeyi ortadan kaldırıyor. İçeride vektör formunda birbirinin aynı yapılar var.

```{r}
#| code-fold: false
users <- tibble(user = gh_users)
users
```

unnest_wider() fonksiyonunu ile hali hazırda düzenli olan yapıyı bir seviye dışarı taşıyoruz.

```{r}
#| code-fold: false
userswide <- users %>% unnest_wider(user)
userswide
```

But in this case, there are many components and we don’t need most of them so we can instead use hoist(). hoist() allows us to pull out selected components using the same syntax as purrr::pluck():

```{r}
#| code-fold: false
users %>% hoist(user, 
  followers = "followers", 
  login = "login", 
  url = "html_url"
)

```

Bu acaip bir şey. Elde eğer her satırda list olan bir yapı varsa, içinden parça parça değişken çıkartabiliyoruz.  
Düzenlemek istediğimiz list'in içi dataframe ise unnest_wider çalışmıyor. Örneğin mt_nest,

```{r}
mt_nest_wide <- mt_nest %>% unnest_wider(data)
mt_nest_wide
```

Düzgün görünmüyor bile, içerisini şu şekilde:

```{r}
datatable(mt_nest_wide)
```


Bu gözlem çok kritik. Biz ne istiyoruz? Virgülle ayrılan değerlerin ayrı satırlara yazılmasını, en sağda ise her gözlem için ilgili değerin tekrarlamasını istiyoruz. İşte bu işi yapan ise `unnest_longer`

```{r}
mt_nest_long <- mt_nest %>% unnest_longer(data)
mt_nest_long
```

Yukarıdaki NFT datası da içiçe listlerden oluşuyor. Bunu daha önce şu şekilde tibble formuna dönüştürdüm. 

```{r}
d2
```

Şimdi `unnest_longer` kullanarak bir seviye içeriyi dışarı çıkarıyorum.

```{r}
d22 <- d2 %>% unnest_longer(values)
d22
```


Unnest_longer ve unnest_wider beraber kullanılan bir örneğe bakıyorum son olarak.

We start off gh_repos similarly, by putting it in a tibble:

```{r}
#| code-fold: false
repos <- tibble(repo = gh_repos)
repos
```

This time the elements of repos are a list of repositories that belong to that user. These are observations, so should become new rows, so we use unnest_longer() rather than unnest_wider():

```{r}
#| code-fold: false
repos0 <- repos %>% unnest_longer(repo)
repos0
```

Aslına bu şekilde 6 kullanıcınında repolarını alt alta koyduk ve devamında unnest_wider veya hoist kullanarak verileri dışarı çıkarabilir. Ama eğer mesela sadece birinci user'ın repoları ile çalışmak isteseydik önce o user'ın olduğu list'i tibble yapmak gerekecekti. 

```{r}
#| code-fold: false
firstUser <- tibble(repo=repos[[1]][[1]])
firstUser

```
Eğer devamında unnest_longer denirse bu durumda alt seviye tamamen dışarıya çıkıyor.

```{r}
#| code-fold: false
firstUser %>% unnest_longer(repo)
```
Ama kısmen değerlere hoist veya unnest_wider ile mümkün. Önce hoist kodunu veriyorum çünkü bu zaten sitede de var.

```{r}
#| code-fold: false
firstUser %>% hoist(repo, 
  login = c("owner", "login"), 
  name = "name",
  homepage = "homepage",
  watchers = "watchers_count"
)
```
Bu da unnest_wider kodu;

```{r}
#| code-fold: false
firstUser %>% unnest_wider(repo)
```


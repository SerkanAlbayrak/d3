---
title: "List veri yapısı üzerine üzerine notlar ve map Fonksiyonu"
author: Raif Serkan Albayrak
description: "R'ın en esnek veri yapısı olan list veri yapısından tutulan veriye ulaşma, formatlama ve dönüştürme üzerine en sık kullandığım yöntemleri yazıyorum."
date: 2022-12-11
categories:
  - purrr
  - map
code-fold: true
image: "img/preview.png"
lang: tr
code-line-numbers: false
toc-title: İçerik
---

```{r}
library(tidyverse)
library(listviewer)
```

Liste veri yapısı her ne kadar R'ın bildiğim kadarıyla en esnek veri yapısı olsa da, filtrelenmesi, endekslenmesi ve hata veri girişi konusu karışık ve az biliniyor. Özellikler JSON tipi veri liste dönüştüğünde katmanlı ve düzensiz bir yapıya sahip olabiliyor. Bu gibi durumlarda istenen herhangi bir katmandaki tüm veriyi çekmek veya ihtiyaç duyulan filtrelemeleri yapmak kolay değil. Bunlardan sonra daha detaylı analizler için zaten list'i tibble veya dataframe'e dönüştürmek gerekiyor. O kısım da bu yazının konusu.

Yazıya ters yönlü transformasyonla başlamak en iyi seçenek gibi görünmeyebilir ama aslında yazı boyunca kullanılabilecek örnek list verisi oluşturabilmek için de tibble'dan list'e dönüşüm ile başlıyorum.

# Tibble veya DataFrame'den List Oluşturmak

Tibble'dan list'e dönüşüm bir veya daha fazla kategorik değişken üzerinden yürütülür. Örneğin `mtcars` verisinde silindir değişkeni ile veriyi üçe parçalamak mümkün.

## Split

```{r}
mtList <- mtcars %>%
  split(.$cyl)
jsonedit(mtList)
```

<br>

Bir diğer örnek `CO2` verisi üzerinde olacak.

```{r}
head(CO2)
summary(CO2)
```

```{r}
CO2List <- split(CO2, f = list(CO2$Type, CO2$Treatment))
map(CO2List,head)
```

Burada split işlemini geri almak da mümkün ama işlevsiz f argümanı o aşamada elde olması pek mümkün olmayan bir veri.

```{r}
dfCO2 <- unsplit(CO2List,f = list(CO2$Type,CO2$Treatment))
```

## Nest

Nest ile de list oluşturmak mümkün. Nasıl çalıştığını görmek için önce çok basit bir örnek üzerinde uyguluyoruz. BU örnek orjinal yardım dosyasından.

```{r}
df <- tibble(x = c(1, 1, 1, 2, 2, 3), y = 1:6, z = 6:1)
# Note that we get one row of output for each unique combination of
# non-nested variables
df_nested <- df %>% nest(data = c(y, z))
df_nested
```

nest edilmeyen değişkenlerim her kombinasyonu bir satırda gösteriliyor.

```{r}
df_nested[1,2][[1]]
```

chop benzeri bir işlem yapar ama kolonları da tutar, birleştirmez.

```{r}
# chop does something similar, but retains individual columns
df_chop <- df %>% chop(c(y, z))
df_chop
```



# Modify_depth

https://purrr.tidyverse.org/reference/modify.html adresinde konu ile ilgili detaylı açıklama ve çok sayıda örnek mevcut,

Aşağıdaki örnekte bir nested list içinde, 2 seviye içeriden tüm değerleri çekmek için modify depth kullanılabilir.

```{r}
l1 <- list(
  obj1 = list(
    prop1 = list(param1 = 1:2, param2 = 3:4),
    prop2 = list(param1 = 5:6, param2 = 7:8)
  ),
  obj2 = list(
    prop1 = list(param1 = 9:10, param2 = 11:12),
    prop2 = list(param1 = 12:14, param2 = 15:17)
  )
)

l2 <- l1 %>% modify_depth(2, "param1")
l2
```
# NFT Datasını Dönüştürmek

NFT Datasının içinden trait verileri alıp bir tibble'a dönüştürme işiyla başlıyoruz. Aslında verinin içinde trait alt listesinin yapısı son derece düzgün. Amaç bunu dönüştürmek. Temel sıkıntı tekrar etmesi gereken name değerleri var.
```{r}

load("nft_traits.rda")
jsonedit(rc_traits_data)
```

### Map - Enframe - Unnest

Enframe ile baştan bir yapı empoze edilebiliyor.

```{r}
#| code-fold: false
d0 <- rc_traits_data$collection$traits
d1 <- d0 %>% enframe(name = "name", value = "values")
d1
```
Amaç values sütununda bulunan her list'i tibble'a dönüştürmek. Aşağıdaki kodu anlamak çok kritik. Tibble içinde map işlemi nasıl yapılır onu gösteriyor. İki farklı şekilde aynı sonuca ulaşıyorum. Birincisinde satır bazında her list'in uzunluğunu hesaplatıyorum. İkincisinde ise tek defada bütün values kolonuna işlem uygulayıp yeni değişken oluşturuyorum. 

Daha basitleştirmek için: bir tibble içinde bir değişkeni iki ile çarparak yeni bir değişken oluşturmak istensin. Nasıl yapılır? İki yolu var. Birincisi, satır bazında işlem yapılır. Excel'de olduğu gibi. Yan hücrenin iki katını al, aşağıya şek. Eğer hücre bazına indirmeden length hesaplamaya kalkılırsa bütün kolonunun length'i hesaplanıp her hücreye yazılır ki bu bir hatadır. İkinci yol ise vektör operasyonu kullanmak. Değişkeni bir vektör olarak alıp, vektörü iki ile çarpıp, sonucu tibble'a yeni bir değişken olarak yerleştirmek. İşte `map` ile yapılan ikincisi. Bu işlem çok daha hızlı oluyor.

```{r}
#| code-fold: false
d2.0 <- d1 %>% rowwise() %>% mutate(n_t=length(values))
d2.0
d2.0.error <- d1 %>% mutate(n_t=length(values))
d2.0.error
d2 <- d1 %>% mutate(n_t = map_int(values,length))
d2
```


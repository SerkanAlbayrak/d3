{
  "hash": "11fa114e9482878202b8c9a63b15a55d",
  "result": {
    "markdown": "---\ntitle: \"List veri yapısı üzerine üzerine notlar ve map Fonksiyonu\"\nauthor: Raif Serkan Albayrak\ndescription: \"R'ın en esnek veri yapısı olan list veri yapısından tutulan veriye ulaşma, formatlama ve dönüştürme üzerine en sık kullandığım yöntemleri yazıyorum.\"\ndate: 2022-12-11\ncategories:\n  - purrr\n  - map\ncode-fold: true\nimage: \"img/preview.png\"\nlang: tr\ncode-line-numbers: false\ntoc-title: İçerik\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(listviewer)\n```\n:::\n\n\nListe veri yapısı her ne kadar R'ın bildiğim kadarıyla en esnek veri yapısı olsa da, filtrelenmesi, endekslenmesi ve hata veri girişi konusu karışık ve az biliniyor. Özellikler JSON tipi veri liste dönüştüğünde katmanlı ve düzensiz bir yapıya sahip olabiliyor. Bu gibi durumlarda istenen herhangi bir katmandaki tüm veriyi çekmek veya ihtiyaç duyulan filtrelemeleri yapmak kolay değil. Bunlardan sonra daha detaylı analizler için zaten list'i tibble veya dataframe'e dönüştürmek gerekiyor. O kısım da bu yazının konusu.\n\nYazıya ters yönlü transformasyonla başlamak en iyi seçenek gibi görünmeyebilir ama aslında yazı boyunca kullanılabilecek örnek list verisi oluşturabilmek için de tibble'dan list'e dönüşüm ile başlıyorum.\n\n# Tibble veya DataFrame'den List Oluşturmak\n\nTibble'dan list'e dönüşüm bir veya daha fazla kategorik değişken üzerinden yürütülür. Örneğin `mtcars` verisinde silindir değişkeni ile veriyi üçe parçalamak mümkün.\n\n## Split\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtList <- mtcars %>%\n  split(.$cyl)\njsonedit(mtList)\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"jsonedit html-widget html-fill-item-overflow-hidden html-fill-item\" id=\"htmlwidget-7e0c12f287ae003f015a\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-7e0c12f287ae003f015a\">{\"x\":{\"data\":{\"4\":{\"mpg\":[22.8,24.4,22.8,32.4,30.4,33.9,21.5,27.3,26,30.4,21.4],\"cyl\":[4,4,4,4,4,4,4,4,4,4,4],\"disp\":[108,146.7,140.8,78.7,75.7,71.09999999999999,120.1,79,120.3,95.09999999999999,121],\"hp\":[93,62,95,66,52,65,97,66,91,113,109],\"drat\":[3.85,3.69,3.92,4.08,4.93,4.22,3.7,4.08,4.43,3.77,4.11],\"wt\":[2.32,3.19,3.15,2.2,1.615,1.835,2.465,1.935,2.14,1.513,2.78],\"qsec\":[18.61,20,22.9,19.47,18.52,19.9,20.01,18.9,16.7,16.9,18.6],\"vs\":[1,1,1,1,1,1,1,1,0,1,1],\"am\":[1,0,0,1,1,1,0,1,1,1,1],\"gear\":[4,4,4,4,4,4,3,4,5,5,4],\"carb\":[1,2,2,1,2,1,1,1,2,2,2]},\"6\":{\"mpg\":[21,21,21.4,18.1,19.2,17.8,19.7],\"cyl\":[6,6,6,6,6,6,6],\"disp\":[160,160,258,225,167.6,167.6,145],\"hp\":[110,110,110,105,123,123,175],\"drat\":[3.9,3.9,3.08,2.76,3.92,3.92,3.62],\"wt\":[2.62,2.875,3.215,3.46,3.44,3.44,2.77],\"qsec\":[16.46,17.02,19.44,20.22,18.3,18.9,15.5],\"vs\":[0,0,1,1,1,1,0],\"am\":[1,1,0,0,0,0,1],\"gear\":[4,4,3,3,4,4,5],\"carb\":[4,4,1,1,4,4,6]},\"8\":{\"mpg\":[18.7,14.3,16.4,17.3,15.2,10.4,10.4,14.7,15.5,15.2,13.3,19.2,15.8,15],\"cyl\":[8,8,8,8,8,8,8,8,8,8,8,8,8,8],\"disp\":[360,360,275.8,275.8,275.8,472,460,440,318,304,350,400,351,301],\"hp\":[175,245,180,180,180,205,215,230,150,150,245,175,264,335],\"drat\":[3.15,3.21,3.07,3.07,3.07,2.93,3,3.23,2.76,3.15,3.73,3.08,4.22,3.54],\"wt\":[3.44,3.57,4.07,3.73,3.78,5.25,5.424,5.345,3.52,3.435,3.84,3.845,3.17,3.57],\"qsec\":[17.02,15.84,17.4,17.6,18,17.98,17.82,17.42,16.87,17.3,15.41,17.05,14.5,14.6],\"vs\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0],\"am\":[0,0,0,0,0,0,0,0,0,0,0,0,1,1],\"gear\":[3,3,3,3,3,3,3,3,3,3,3,3,5,5],\"carb\":[2,4,3,3,3,4,4,4,2,2,4,2,4,8]}},\"options\":{\"mode\":\"tree\",\"modes\":[\"code\",\"form\",\"text\",\"tree\",\"view\"]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n<br>\n\nBir diğer örnek `CO2` verisi üzerinde olacak.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(CO2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Plant   Type  Treatment conc uptake\n1   Qn1 Quebec nonchilled   95   16.0\n2   Qn1 Quebec nonchilled  175   30.4\n3   Qn1 Quebec nonchilled  250   34.8\n4   Qn1 Quebec nonchilled  350   37.2\n5   Qn1 Quebec nonchilled  500   35.3\n6   Qn1 Quebec nonchilled  675   39.2\n```\n:::\n\n```{.r .cell-code}\nsummary(CO2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     Plant             Type         Treatment       conc          uptake     \n Qn1    : 7   Quebec     :42   nonchilled:42   Min.   :  95   Min.   : 7.70  \n Qn2    : 7   Mississippi:42   chilled   :42   1st Qu.: 175   1st Qu.:17.90  \n Qn3    : 7                                    Median : 350   Median :28.30  \n Qc1    : 7                                    Mean   : 435   Mean   :27.21  \n Qc3    : 7                                    3rd Qu.: 675   3rd Qu.:37.12  \n Qc2    : 7                                    Max.   :1000   Max.   :45.50  \n (Other):42                                                                  \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nCO2List <- split(CO2, f = list(CO2$Type, CO2$Treatment))\nmap(CO2List,head)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$Quebec.nonchilled\n  Plant   Type  Treatment conc uptake\n1   Qn1 Quebec nonchilled   95   16.0\n2   Qn1 Quebec nonchilled  175   30.4\n3   Qn1 Quebec nonchilled  250   34.8\n4   Qn1 Quebec nonchilled  350   37.2\n5   Qn1 Quebec nonchilled  500   35.3\n6   Qn1 Quebec nonchilled  675   39.2\n\n$Mississippi.nonchilled\n   Plant        Type  Treatment conc uptake\n43   Mn1 Mississippi nonchilled   95   10.6\n44   Mn1 Mississippi nonchilled  175   19.2\n45   Mn1 Mississippi nonchilled  250   26.2\n46   Mn1 Mississippi nonchilled  350   30.0\n47   Mn1 Mississippi nonchilled  500   30.9\n48   Mn1 Mississippi nonchilled  675   32.4\n\n$Quebec.chilled\n   Plant   Type Treatment conc uptake\n22   Qc1 Quebec   chilled   95   14.2\n23   Qc1 Quebec   chilled  175   24.1\n24   Qc1 Quebec   chilled  250   30.3\n25   Qc1 Quebec   chilled  350   34.6\n26   Qc1 Quebec   chilled  500   32.5\n27   Qc1 Quebec   chilled  675   35.4\n\n$Mississippi.chilled\n   Plant        Type Treatment conc uptake\n64   Mc1 Mississippi   chilled   95   10.5\n65   Mc1 Mississippi   chilled  175   14.9\n66   Mc1 Mississippi   chilled  250   18.1\n67   Mc1 Mississippi   chilled  350   18.9\n68   Mc1 Mississippi   chilled  500   19.5\n69   Mc1 Mississippi   chilled  675   22.2\n```\n:::\n:::\n\n\nBurada split işlemini geri almak da mümkün ama işlevsiz f argümanı o aşamada elde olması pek mümkün olmayan bir veri.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndfCO2 <- unsplit(CO2List,f = list(CO2$Type,CO2$Treatment))\n```\n:::\n\n\n## Nest\n\nNest ile de list oluşturmak mümkün. Nasıl çalıştığını görmek için önce çok basit bir örnek üzerinde uyguluyoruz. BU örnek orjinal yardım dosyasından.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- tibble(x = c(1, 1, 1, 2, 2, 3), y = 1:6, z = 6:1)\n# Note that we get one row of output for each unique combination of\n# non-nested variables\ndf_nested <- df %>% nest(data = c(y, z))\ndf_nested\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n      x data            \n  <dbl> <list>          \n1     1 <tibble [3 × 2]>\n2     2 <tibble [2 × 2]>\n3     3 <tibble [1 × 2]>\n```\n:::\n:::\n\n\nnest edilmeyen değişkenlerim her kombinasyonu bir satırda gösteriliyor.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_nested[1,2][[1]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n# A tibble: 3 × 2\n      y     z\n  <int> <int>\n1     1     6\n2     2     5\n3     3     4\n```\n:::\n:::\n\n\nchop benzeri bir işlem yapar ama kolonları da tutar, birleştirmez.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# chop does something similar, but retains individual columns\ndf_chop <- df %>% chop(c(y, z))\ndf_chop\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 3\n      x           y           z\n  <dbl> <list<int>> <list<int>>\n1     1         [3]         [3]\n2     2         [2]         [2]\n3     3         [1]         [1]\n```\n:::\n:::\n\n\n# Modify_depth\n\nhttps://purrr.tidyverse.org/reference/modify.html adresinde konu ile ilgili detaylı açıklama ve çok sayıda örnek mevcut,\n\nAşağıdaki örnekte bir nested list içinde, 2 seviye içeriden tüm değerleri çekmek için modify depth kullanılabilir.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nl1 <- list(\n  obj1 = list(\n    prop1 = list(param1 = 1:2, param2 = 3:4),\n    prop2 = list(param1 = 5:6, param2 = 7:8)\n  ),\n  obj2 = list(\n    prop1 = list(param1 = 9:10, param2 = 11:12),\n    prop2 = list(param1 = 12:14, param2 = 15:17)\n  )\n)\n\nl2 <- l1 %>% modify_depth(2, \"param1\")\nl2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$obj1\n$obj1$prop1\n[1] 1 2\n\n$obj1$prop2\n[1] 5 6\n\n\n$obj2\n$obj2$prop1\n[1]  9 10\n\n$obj2$prop2\n[1] 12 13 14\n```\n:::\n:::\n\n\n# NFT Datasını Dönüştürmek\n\nNFT Datasının içinden trait verileri alıp bir tibble'a dönüştürme işiyla başlıyoruz. Aslında verinin içinde trait alt listesinin yapısı son derece düzgün. Amaç bunu dönüştürmek. Temel sıkıntı tekrar etmesi gereken name değerleri var.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nload(\"nft_traits.rda\")\njsonedit(rc_traits_data)\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"jsonedit html-widget html-fill-item-overflow-hidden html-fill-item\" id=\"htmlwidget-55cfa45964caeb64a63a\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-55cfa45964caeb64a63a\">{\"x\":{\"data\":{\"collection\":{\"editors\":[\"0x184d2b149ff1a39444a01df2ef47ad4e4a89dc43\",\"0xdc714dba9b94474b815e9d556454d0e4fe2253ae\",\"0x83c2a6ffd992b3775da96eca53a779144dc56b9d\",\"0x429ed25bcd3b0ac3632dab6b32c21a78c67ea8e6\"],\"payment_tokens\":[{\"id\":13689077,\"symbol\":\"ETH\",\"address\":\"0x0000000000000000000000000000000000000000\",\"image_url\":\"https://openseauserdata.com/files/6f8e2979d428180222796ff4a33ab929.svg\",\"name\":\"Ether\",\"decimals\":18,\"eth_price\":1,\"usd_price\":1645.48},{\"id\":12182941,\"symbol\":\"DAI\",\"address\":\"0x6b175474e89094c44da98b954eedeac495271d0f\",\"image_url\":\"https://openseauserdata.com/files/dai-ethereum.svg\",\"name\":\"Dai Stablecoin\",\"decimals\":18,\"eth_price\":0.00060775,\"usd_price\":1},{\"id\":4645681,\"symbol\":\"WETH\",\"address\":\"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\",\"image_url\":\"https://openseauserdata.com/files/accae6b6fb3888cbff27a013729c22dc.svg\",\"name\":\"Wrapped Ether\",\"decimals\":18,\"eth_price\":1,\"usd_price\":1645.48},{\"id\":4403908,\"symbol\":\"USDC\",\"address\":\"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\",\"image_url\":\"https://openseauserdata.com/files/749015f009a66abcb3bbb3502ae2f1ce.svg\",\"name\":\"USD Coin\",\"decimals\":6,\"eth_price\":0.00060773,\"usd_price\":1}],\"is_collection_offers_enabled\":true,\"primary_asset_contracts\":[{\"address\":\"0xcfff4c8c0df0e2431977eba7df3d3de857f4b76e\",\"asset_contract_type\":\"non-fungible\",\"created_date\":\"2021-08-15T05:34:52.669499\",\"name\":\"RiverMen\",\"nft_version\":\"3.0\",\"opensea_version\":[],\"owner\":260090723,\"schema_name\":\"ERC721\",\"symbol\":\"RM\",\"total_supply\":\"0\",\"description\":\"Rivermen is a gamified NFT collection based on blockchain technology, created by the Cthuwork&NA team using elements from the voxel version of the “Along the River During Qingming Festival”. The voxel version of “Along the River During Qingming Festival” is a 3D artwork reinterpreting this long scroll, as one of the top ten famous Chinese paintings.\\nThe RIVER refers to the \\\"Bian River\\\" in this ancient painting scroll. Each person in this scene has a unique identity. The Rivermen are the good neighbors and cool folks living in the \\\"Bianriverse\\\".\\nThey are not ancient nor modern, but aboriginal people of the \\\"Bianriverse\\\", which is a metaverse based on \\\"Along the River During the Qingming Festival\\\". They will spend some quality time together in the Bianriverse.\\nRiverSpace：https://opensea.io/collection/river-space\\nRiverEstate：https://opensea.io/collection/riverestate\\nRiverArt：https://opensea.io/collection/riverart\\nRivermenGift：https://opensea.io/collection/rivermengift\",\"external_link\":\"https://rivermen.io/\",\"image_url\":\"https://i.seadn.io/gae/Kc96kxOK06q1eJ5n_xEp_xExRvEue0NdN2NdjAvleeru1k8XoBhgMkqLayoKKiBpYyvPnva2IPhlFbMw0IW1_-YOL96r-zvtIA_DcA?w=500&auto=format\",\"default_to_fiat\":false,\"dev_buyer_fee_basis_points\":0,\"dev_seller_fee_basis_points\":500,\"only_proxied_transfers\":false,\"opensea_buyer_fee_basis_points\":0,\"opensea_seller_fee_basis_points\":0,\"buyer_fee_basis_points\":0,\"seller_fee_basis_points\":500,\"payout_address\":\"0x53ecf0b18b27d3d06a4ed24b095694c5adca8ab7\"}],\"traits\":{\"Type\":{\"human 3\":1774,\"zombie\":1983,\"human 4\":1061,\"human 1\":2292,\"human 2\":1792,\"ghost\":1098},\"Hat\":{\"crown\":415,\"top hat\":384,\"orchid (potted plant)\":176,\"pavilion headwear\":172,\"buddha halo\":190,\"helmet\":397,\"centre parting\":604,\"long winged officer hat\":198,\"winged cap\":315,\"double tail\":597,\"silk thread towel\":189,\"chrysanthemum (potted plant)\":206,\"bamboo hat\":507,\"imperial crown\":405,\"plum (potted plant)\":209,\"tilted frisette\":601,\"bamboo (potted plant)\":210,\"flag head\":340,\"single ponytail\":520,\"golden phoenix crown\":192,\"double hair updo\":344,\"cloudy updo\":364,\"blue phoenix crown\":184,\"red phoenix crown\":197,\"miao silver\":383,\"none\":16,\"low hat\":341,\"diaochan hat\":348,\"taoist hat\":357,\"haetae hat\":337,\"literati hat\":302},\"Head\":{\"dazed expression\":2956,\"smiley face\":2531,\"embarrassed expression\":2027,\"nine barrels\":45,\"surprised expression\":1632,\"kirin\":173,\"steamed stuffed bun\":34,\"buddha\":81,\"noodle\":23,\"chinese dragon\":73,\"rice dumpling\":29,\"dumplings\":20,\"three barrels\":14,\"a barrel\":25,\"facial design of beijing opera\":128,\"rice\":21,\"two barrels\":25,\"eight barrels\":27,\"six barrels\":16,\"steamed bun\":34,\"seven barrels\":28,\"teapot\":10,\"four barrels\":14,\"five barrels\":15,\"cup\":19},\"Jacket\":{\"blue contrast jacket\":496,\"dark red sweater\":374,\"brown jacket\":315,\"orange contrast jacket\":408,\"dark blue sweater\":470,\"purple contrast jacket\":190,\"black and green jacket\":475,\"dark blue contrast jacket\":247,\"dark gray sweater\":280,\"black coat\":345,\"dark green sweater\":167,\"green contrast jacket\":359,\"off-white color matching short sleeves\":316,\"purple jacket\":377,\"green jacket\":180,\"red contrast jacket\":375,\"green color matching short sleeves\":478,\"red coat\":352,\"red jacket\":157,\"dark green jacket\":463,\"pink coat\":268,\"deep purple sweatshirt\":384,\"blue coat\":383,\"light green color matching short sleeves\":177,\"sky blue color matching short sleeves\":303,\"blue jacket\":256,\"lavender color matching short sleeves\":409,\"light blue color matching short sleeves\":254,\"dark green sweatshirt\":385,\"light green jacket\":357},\"Trousers\":{\"orange trousers\":350,\"sky blue shorts\":386,\"black shorts\":365,\"purple overalls\":389,\"green shorts\":491,\"black functional pants\":333,\"rose red trousers\":502,\"blue striped pants\":283,\"purple trousers\":268,\"yellow-green striped pants\":463,\"blue and white overalls\":293,\"purple functional pants\":170,\"blue and green cargo pants\":338,\"brown striped pants\":364,\"pink and green functional pants\":370,\"pink functional pants\":441,\"black trousers\":360,\"orange shorts\":288,\"grey trousers\":380,\"blue and white striped pants\":356,\"light yellow shorts\":183,\"grey overalls\":468,\"blue functional pants\":329,\"denim shorts\":359,\"grey striped pants\":353,\"sky blue trousers\":169,\"khaki overalls\":348,\"blue grey cargo pants\":178,\"green functional pants\":254,\"fuchsia striped pants\":169},\"Shoes\":{\"zijin dynasty skate shoes\":197,\"yellow boots\":203,\"night city army boots\":195,\"tropical beach shoes\":202,\"blue and purple beach shoes\":134,\"macaron army boots\":117,\"void tooling shoes\":176,\"pink and white beach shoes\":164,\"brown martin boots\":179,\"grey martin boots\":233,\"red leather shoes\":196,\"blue and gray leather shoes\":230,\"red skate shoes\":162,\"dark brown army boots\":160,\"avocado army boots\":137,\"pink sandals\":181,\"sky blue basketball shoes\":88,\"heat tooling shoes\":183,\"blue and green boots\":180,\"blue sandals\":221,\"summer martin boots\":133,\"purple martin boots\":94,\"white boots\":86,\"red sandals\":172,\"red and blue beach shoes\":234,\"brown skate shoes\":244,\"red boots\":175,\"green basketball shoes\":197,\"grey sandals\":85,\"orange martin boots\":173,\"brown leather shoes\":128,\"night city tooling shoes\":129,\"blue basketball shoes\":157,\"blue and black boots\":159,\"purple sweet potato military boots\":174,\"macaron tooling shoes\":94,\"martin boots\":194,\"yellow leather shoes\":75,\"retro style skate shoes\":86,\"pink basketball shoes\":200,\"gypsy tooling shoes\":168,\"light brown army boots\":213,\"orange boots\":144,\"turquoise skateboard shoes\":124,\"summer beach shoes\":180,\"red and blue boots\":264,\"grey skate shoes\":165,\"ice cream boots\":208,\"green leather shoes\":191,\"light green basketball shoes\":137,\"ice cream beach shoes\":67,\"orange basketball shoes\":269,\"green boots\":234,\"mamba tooling shoes\":230,\"novice boots\":137,\"green sandals\":172,\"eskimo boots\":82,\"khaki sandals\":132,\"pink leather shoes\":207,\"blue boots\":149},\"USED\":{\"yes\":5091,\"no\":4909},\"Identity\":{\"the pedestrian\":50,\"tax officer a\":55,\"boatman a\":50,\"the restaurant owner\":50,\"the fortune-telling customer a\":49,\"the director\":50,\"the passing-by wooden-luggage porter\":55,\"the traveler on the bridge\":49,\"the vendor\":50,\"carter c\":49,\"a passer-by with a burden\":50,\"wine-carrying solider a\":55,\"the waiting coachman\":50,\"the restaurant customer\":50,\"restaurant guest b\":49,\"servant b\":50,\"chatting teahouse guest b\":50,\"the bellman\":55,\"a father and a son\":50,\"chatting teahouse guest, a\":50,\"sculling boatman b\":49,\"bystander d\":50,\"the house horse-leading servant\":55,\"the delivery boaters\":50,\"idle soldier d\":49,\"the store owner\":50,\"restaurant guest a\":50,\"the following porter\":50,\"the cake stand owner\":50,\"the walking-by porter\":50,\"warning boatman a\":50,\"the house pole-carrying servant\":50,\"the palanquin-carrier of the civil official\":50,\"the hotel waiter\":50,\"the vegetable farmer\":50,\"the caravan leader\":50,\"the child-holding woman\":50,\"the absent-minded pedestrian\":50,\"the barge haulers\":50,\"traveler b\":50,\"idle soldier a\":50,\"the babycaring maid\":50,\"silk store customer a\":50,\"warning boatman c\":50,\"teahouse guest b\":50,\"the coachman of the civil official\":50,\"the young farmer\":49,\"monks\":10,\"the shoes-trying-on customers\":49,\"the pedestrians\":50,\"the shading scholar\":50,\"chatting teahouse guest c\":50,\"the horse-chasing coachman\":50,\"the wheaten food vendor\":49,\"restaurant guest c\":50,\"barge hauler a\":49,\"water carrier b\":49,\"confucian student a\":49,\"the taciturn seller\":15,\"the palanquin-carrier\":55,\"the scholar in white\":49,\"the beauty in red\":49,\"the cordage stall owner\":50,\"the cart hauler\":50,\"the walking officer\":50,\"traveler a\":50,\"the laundering old woman\":50,\"ship passenger b\":50,\"the lamb stall owner\":15,\"the bargaining drinker\":50,\"drinker b\":50,\"the furniture store owner\":50,\"the rich student\":15,\"the treating teenager\":50,\"warning boatman b\":50,\"cash-in-transit guard a\":50,\"arguing scholar b\":55,\"traveler c\":50,\"caravan followers\":50,\"carter a\":49,\"the clinic doctor\":50,\"the horse-riding passer-by\":50,\"the old shaving man\":50,\"barge hauler b\":50,\"the lookers-on\":49,\"ship passenger a\":50,\"the divination interpreter\":50,\"the herb-drinks vendor\":50,\"the easy porter\":55,\"shipmate b\":50,\"the inviting scholar\":55,\"the flower buyer\":50,\"carter b\":49,\"the audience\":50,\"sculler-holding boatman d\":49,\"the bodyguard servant\":50,\"the old donkey-riding lady\":50,\"teahouse guest c\":50,\"the tea drinking customers\":50,\"the poling boatman\":50,\"fortune teller a\":50,\"the way-asking countryman\":50,\"the wine cart fella\":50,\"the sacrificing boatman\":50,\"tax officer c\":55,\"the touring scholar\":53,\"bystander c\":49,\"the boatman-in-command\":50,\"sculler-holding boatman a\":50,\"boatman b\":50,\"the drinking customer\":49,\"the teenage farmer\":50,\"the old seller\":50,\"the wandering -around passersby\":55,\"the halting passer-by\":50,\"the inn owner\":50,\"wine-carrying solider b\":54,\"the shipowner\":49,\"troubled carter b\":50,\"confucian student b\":50,\"the cart puller\":50,\"the buyer\":50,\"the flower seller\":50,\"the palanquin-carrying servants\":50,\"the matchmaker\":52,\"silk store customer b\":49,\"the smuggler\":49,\"the wine carter\":50,\"water carrier a\":50,\"the paraffin oil buyer\":50,\"the soldier\":50,\"sculling boatman c\":48,\"the pondering scholar\":55,\"the fortune-telling customer\":50,\"the old charcoal seller\":15,\"the toy vendor\":50,\"farmer b\":50,\"cash-in-transit guard b\":50,\"cake stand customers\":50,\"the arguing carter\":54,\"the restaurant waiter\":50,\"the horse-riding master\":50,\"servant a\":50,\"the flower-buying hostess\":50,\"the accompanying women\":49,\"the military official\":15,\"teahouse guest a\":50,\"the horse-leading servant\":50,\"the panicking baby-holding woman\":50,\"the rest-taking porter\":49,\"the fortune-telling looker-on\":50,\"the discontent bystander\":50,\"the wheel carpenters\":50,\"the pole-carrying servant\":49,\"idle soldier c\":50,\"bystander a\":50,\"shipmate a\":50,\"water carrier c\":50,\"the delivery man\":50,\"the old donkey-riding man\":50,\"the mysterious hostess\":54,\"the salt store owner\":50,\"idle soldier b\":49,\"the audience with a child\":50,\"the bending bystander\":50,\"troubled carter a\":50,\"the annoyed scholar\":55,\"tax officer b\":55,\"the flower stall owner\":50,\"the storyteller\":50,\"the exhausted porter\":55,\"drinker a\":50,\"sculler-holding boatman b\":50,\"the fan-holding scholar\":55,\"the luggage-carrying coachman\":50,\"the tavern waiter\":50,\"the rest-taking boatman\":50,\"the paper horse vendor\":50,\"the following servant\":50,\"the prayer-holding host\":50,\"bystander b\":49,\"the traveling scholar\":50,\"arguing scholar a\":54,\"the refuged porter\":50,\"the begging monk\":49,\"farmer a\":50,\"the wood-milling carpenter\":50,\"the rich man\":50,\"the cordage stall customers\":49,\"the shaving customer\":50,\"the passing-by porter\":50,\"the inquirying woman\":50,\"the deputy military official\":50,\"the bow-shooting officer\":55,\"the sheep butcher\":50,\"drunk soldier a\":48,\"drunk soldier b\":50,\"the fortune teller\":49,\"the noble lady\":50,\"sculler-holding boatman c\":49,\"the guiding doorkeeper\":50,\"sculling boatman a\":50},\"Background\":{\"background 2\":1378,\"background 7\":1310,\"background 5\":1432,\"background 4\":1501,\"background 1\":1485,\"background 6\":1416,\"background 3\":1478}},\"stats\":{\"one_hour_volume\":1.748800000000001,\"one_hour_change\":1.732499957084656,\"one_hour_sales\":22,\"one_hour_sales_change\":1.75,\"one_hour_average_price\":0.07949090909090911,\"one_hour_difference\":1.1088,\"six_hour_volume\":4.509800000000002,\"six_hour_change\":1.296232223510742,\"six_hour_sales\":57,\"six_hour_sales_change\":1.279999971389771,\"six_hour_average_price\":0.07911929824561408,\"six_hour_difference\":2.545800000000002,\"one_day_volume\":233.8624400000008,\"one_day_change\":0.2826482057571411,\"one_day_sales\":198,\"one_day_sales_change\":0.1314285695552826,\"one_day_average_price\":1.181123434343438,\"one_day_difference\":51.53463000000133,\"seven_day_volume\":537.3888700000037,\"seven_day_change\":1246.131283360417,\"seven_day_sales\":525,\"seven_day_average_price\":1.023597847619055,\"seven_day_difference\":536.9579700000038,\"thirty_day_volume\":538.9754700000036,\"thirty_day_change\":272.9114041774679,\"thirty_day_sales\":551,\"thirty_day_average_price\":0.9781768965517307,\"thirty_day_difference\":537.0077700000036,\"total_volume\":1833.24677959707,\"total_sales\":5741,\"total_supply\":9992,\"count\":9992,\"num_owners\":1528,\"average_price\":0.3193253404628236,\"num_reports\":1,\"market_cap\":10227.7896934096,\"floor_price\":0.08},\"banner_image_url\":\"https://i.seadn.io/gae/VZowVg9mtZOBs0NGB9Mq6q4I2ZS1_drtc9K_0QPgBtgAvuoaOdfnwr7zQrqujj9sWfuiJCoiLImSDaLjCNnf05TCbAFl_EarqG_dTw?w=500&auto=format\",\"chat_url\":[],\"created_date\":\"2021-08-15T08:00:37.309132+00:00\",\"default_to_fiat\":false,\"description\":\"Rivermen is a gamified NFT collection based on blockchain technology, created by the Cthuwork&NA team using elements from the voxel version of the “Along the River During Qingming Festival”. The voxel version of “Along the River During Qingming Festival” is a 3D artwork reinterpreting this long scroll, as one of the top ten famous Chinese paintings.\\nThe RIVER refers to the \\\"Bian River\\\" in this ancient painting scroll. Each person in this scene has a unique identity. The Rivermen are the good neighbors and cool folks living in the \\\"Bianriverse\\\".\\nThey are not ancient nor modern, but aboriginal people of the \\\"Bianriverse\\\", which is a metaverse based on \\\"Along the River During the Qingming Festival\\\". They will spend some quality time together in the Bianriverse.\\nRiverSpace：https://opensea.io/collection/river-space\\nRiverEstate：https://opensea.io/collection/riverestate\\nRiverArt：https://opensea.io/collection/riverart\\nRivermenGift：https://opensea.io/collection/rivermengift\",\"dev_buyer_fee_basis_points\":\"0\",\"dev_seller_fee_basis_points\":\"500\",\"discord_url\":\"https://discord.gg/rivermen\",\"display_data\":{\"card_display_style\":\"contain\",\"images\":[]},\"external_url\":\"https://rivermen.io/\",\"featured\":false,\"featured_image_url\":\"https://i.seadn.io/gae/wz2X5eupdm0HzsTRFvpqI86VBNEGgq1XH9V4kKAs5-rppnBpM2gASLp2bDvJpLzYzDlIHRLwqsi2GMOpI71jLL56-wN67VGl7XBCPBQ?w=500&auto=format\",\"hidden\":false,\"safelist_request_status\":\"verified\",\"image_url\":\"https://i.seadn.io/gae/Kc96kxOK06q1eJ5n_xEp_xExRvEue0NdN2NdjAvleeru1k8XoBhgMkqLayoKKiBpYyvPnva2IPhlFbMw0IW1_-YOL96r-zvtIA_DcA?w=500&auto=format\",\"is_subject_to_whitelist\":false,\"large_image_url\":\"https://i.seadn.io/gae/wz2X5eupdm0HzsTRFvpqI86VBNEGgq1XH9V4kKAs5-rppnBpM2gASLp2bDvJpLzYzDlIHRLwqsi2GMOpI71jLL56-wN67VGl7XBCPBQ?w=500&auto=format\",\"medium_username\":\"Rivermen\",\"name\":\"Rivermen\",\"only_proxied_transfers\":false,\"opensea_buyer_fee_basis_points\":\"0\",\"opensea_seller_fee_basis_points\":0,\"payout_address\":\"0x53ecf0b18b27d3d06a4ed24b095694c5adca8ab7\",\"require_email\":false,\"short_description\":[],\"slug\":\"rivermen\",\"telegram_url\":\"https://t.me/RivermenEN\",\"twitter_username\":\"RivermenNFT\",\"instagram_username\":\"rivermen_nft/\",\"wiki_url\":[],\"is_nsfw\":false,\"fees\":{\"seller_fees\":{\"0x53ecf0b18b27d3d06a4ed24b095694c5adca8ab7\":500},\"opensea_fees\":{}},\"is_rarity_enabled\":false,\"is_creator_fees_enforced\":false}},\"options\":{\"mode\":\"tree\",\"modes\":[\"code\",\"form\",\"text\",\"tree\",\"view\"]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n### Map - Enframe - Unnest\n\nEnframe ile baştan bir yapı empoze edilebiliyor.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nd0 <- rc_traits_data$collection$traits\nd1 <- d0 %>% enframe(name = \"name\", value = \"values\")\nd1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9 × 2\n  name       values            \n  <chr>      <list>            \n1 Type       <named list [6]>  \n2 Hat        <named list [31]> \n3 Head       <named list [25]> \n4 Jacket     <named list [30]> \n5 Trousers   <named list [30]> \n6 Shoes      <named list [60]> \n7 USED       <named list [2]>  \n8 Identity   <named list [202]>\n9 Background <named list [7]>  \n```\n:::\n:::\n\n\nAmaç values sütununda bulunan her list'i tibble'a dönüştürmek. Aşağıdaki kodu anlamak çok kritik. Tibble içinde map işlemi nasıl yapılır onu gösteriyor. İki farklı şekilde aynı sonuca ulaşıyorum. Birincisinde satır bazında her list'in uzunluğunu hesaplatıyorum. İkincisinde ise tek defada bütün values kolonuna işlem uygulayıp yeni değişken oluşturuyorum.\n\nDaha basitleştirmek için: bir tibble içinde bir değişkeni iki ile çarparak yeni bir değişken oluşturmak istensin. Nasıl yapılır? İki yolu var. Birincisi, satır bazında işlem yapılır. Excel'de olduğu gibi. Yan hücrenin iki katını al, aşağıya şek. Eğer hücre bazına indirmeden length hesaplamaya kalkılırsa bütün kolonunun length'i hesaplanıp her hücreye yazılır ki bu bir hatadır. İkinci yol ise vektör operasyonu kullanmak. Değişkeni bir vektör olarak alıp, vektörü iki ile çarpıp, sonucu tibble'a yeni bir değişken olarak yerleştirmek. İşte `map` ile yapılan ikincisi. Bu işlem çok daha hızlı oluyor.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nd2.0 <- d1 %>% rowwise() %>% mutate(n_t=length(values))\nd2.0\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9 × 3\n# Rowwise: \n  name       values               n_t\n  <chr>      <list>             <int>\n1 Type       <named list [6]>       6\n2 Hat        <named list [31]>     31\n3 Head       <named list [25]>     25\n4 Jacket     <named list [30]>     30\n5 Trousers   <named list [30]>     30\n6 Shoes      <named list [60]>     60\n7 USED       <named list [2]>       2\n8 Identity   <named list [202]>   202\n9 Background <named list [7]>       7\n```\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\nd2.0.error <- d1 %>% mutate(n_t=length(values))\nd2.0.error\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9 × 3\n  name       values               n_t\n  <chr>      <list>             <int>\n1 Type       <named list [6]>       9\n2 Hat        <named list [31]>      9\n3 Head       <named list [25]>      9\n4 Jacket     <named list [30]>      9\n5 Trousers   <named list [30]>      9\n6 Shoes      <named list [60]>      9\n7 USED       <named list [2]>       9\n8 Identity   <named list [202]>     9\n9 Background <named list [7]>       9\n```\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\nd2 <- d1 %>% mutate(n_t = map_int(values,length))\nd2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9 × 3\n  name       values               n_t\n  <chr>      <list>             <int>\n1 Type       <named list [6]>       6\n2 Hat        <named list [31]>     31\n3 Head       <named list [25]>     25\n4 Jacket     <named list [30]>     30\n5 Trousers   <named list [30]>     30\n6 Shoes      <named list [60]>     60\n7 USED       <named list [2]>       2\n8 Identity   <named list [202]>   202\n9 Background <named list [7]>       7\n```\n:::\n:::\n\n\n# Rectangularization\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../../site_libs/htmlwidgets-1.6.2/htmlwidgets.js\"></script>\r\n<link href=\"../../../site_libs/jsoneditor-5.25.6/jsoneditor.min.css\" rel=\"stylesheet\" />\r\n<script src=\"../../../site_libs/jsoneditor-5.25.6/jsoneditor.min.js\"></script>\r\n<script src=\"../../../site_libs/jsonedit-binding-3.0.0/jsonedit.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}